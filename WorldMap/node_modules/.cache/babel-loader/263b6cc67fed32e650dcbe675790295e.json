{"ast":null,"code":"var _jsxFileName = \"/Users/chenze/Desktop/SWEN422/swen422-assignment3-1/Example/src/Components/Marks.js\",\n  _s = $RefreshSig$();\nimport { geoEqualEarth, geoPath, selectAll, select, svg, json, tsvFormat, tsv, count } from \"d3\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { feature } from \"topojson\";\nimport \"./Marks.css\";\nimport { LineChart } from \"./LineChart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst projection = geoEqualEarth();\nconst path = geoPath().projection(projection);\nexport const Marks = _ref => {\n  _s();\n  var _data$mapData, _data$mapData$feature;\n  let {\n    data,\n    chart,\n    setCountryName\n  } = _ref;\n  const [id, setid] = useState();\n  const [Data, setData] = useState(null);\n  const [tsvData, setTsvData] = useState();\n\n  // data?.vacData?.data?.map((obj) => {\n  //   console.log(obj.date);\n  // });\n  const svgref = useRef();\n  const jsonUrl = \"https://unpkg.com/world-atlas@1.1.4/world/110m.json\";\n  const tsvUrl = \"https://unpkg.com/world-atlas@1.1.4/world/110m.tsv\";\n\n  // useEffect(() => {\n  const svg = select(svgref.current);\n  useEffect(() => {\n    Promise.all([json(jsonUrl), tsv(tsvUrl)]).then(_ref2 => {\n      var _jsondata$objects;\n      let [jsondata, tsvdata] = _ref2;\n      const countryName = tsvdata === null || tsvdata === void 0 ? void 0 : tsvdata.reduce((accumulator, d) => {\n        accumulator[d.iso_n3] = d.name;\n        return accumulator;\n      }, {});\n      const countries = feature(jsondata, jsondata === null || jsondata === void 0 ? void 0 : (_jsondata$objects = jsondata.objects) === null || _jsondata$objects === void 0 ? void 0 : _jsondata$objects.countries);\n      setData(countries);\n      setTsvData(countryName);\n    });\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        width: \"100%\",\n        height: \"600px\"\n      },\n      ref: svgref,\n      children: /*#__PURE__*/_jsxDEV(\"g\", {\n        className: \"Marks\",\n        children: [/*#__PURE__*/_jsxDEV(\"path\", {\n          className: \"sphere\",\n          d: path({\n            type: \"Sphere\"\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), (_data$mapData = data.mapData) === null || _data$mapData === void 0 ? void 0 : (_data$mapData$feature = _data$mapData.features) === null || _data$mapData$feature === void 0 ? void 0 : _data$mapData$feature.map(feature => /*#__PURE__*/_jsxDEV(\"path\", {\n          className: \"main\",\n          d: path(feature),\n          onClick: () => {\n            setCountryName(tsvData[feature.id]);\n            // setid(tsvData[feature.id]);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(Marks, \"tSp8W3abDK+Mo8OKKGNRkDRCbuM=\");\n_c = Marks;\nvar _c;\n$RefreshReg$(_c, \"Marks\");","map":{"version":3,"names":["geoEqualEarth","geoPath","selectAll","select","svg","json","tsvFormat","tsv","count","useState","useRef","useEffect","feature","LineChart","projection","path","Marks","data","chart","setCountryName","id","setid","Data","setData","tsvData","setTsvData","svgref","jsonUrl","tsvUrl","current","Promise","all","then","jsondata","tsvdata","countryName","reduce","accumulator","d","iso_n3","name","countries","objects","width","height","type","mapData","features","map"],"sources":["/Users/chenze/Desktop/SWEN422/swen422-assignment3-1/Example/src/Components/Marks.js"],"sourcesContent":["import {\n  geoEqualEarth,\n  geoPath,\n  selectAll,\n  select,\n  svg,\n  json,\n  tsvFormat,\n  tsv,\n  count,\n} from \"d3\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { feature } from \"topojson\";\nimport \"./Marks.css\";\nimport { LineChart } from \"./LineChart\";\n\nconst projection = geoEqualEarth();\nconst path = geoPath().projection(projection);\nexport const Marks = ({ data, chart, setCountryName }) => {\n  const [id, setid] = useState();\n  const [Data, setData] = useState(null);\n  const [tsvData, setTsvData] = useState();\n\n  // data?.vacData?.data?.map((obj) => {\n  //   console.log(obj.date);\n  // });\n  const svgref = useRef();\n\n  const jsonUrl = \"https://unpkg.com/world-atlas@1.1.4/world/110m.json\";\n  const tsvUrl = \"https://unpkg.com/world-atlas@1.1.4/world/110m.tsv\";\n\n  // useEffect(() => {\n  const svg = select(svgref.current);\n\n  useEffect(() => {\n    Promise.all([json(jsonUrl), tsv(tsvUrl)]).then(([jsondata, tsvdata]) => {\n      const countryName = tsvdata?.reduce((accumulator, d) => {\n        accumulator[d.iso_n3] = d.name;\n        return accumulator;\n      }, {});\n      const countries = feature(jsondata, jsondata?.objects?.countries);\n      setData(countries);\n      setTsvData(countryName);\n    });\n  }, [id]);\n\n  return (\n    <>\n      <svg style={{ width: \"100%\", height: \"600px\" }} ref={svgref}>\n        <g className=\"Marks\">\n          <path className=\"sphere\" d={path({ type: \"Sphere\" })} />\n          {data.mapData?.features?.map((feature) => (\n            <path\n              className=\"main\"\n              d={path(feature)}\n              onClick={() => {\n                setCountryName(tsvData[feature.id]);\n                // setid(tsvData[feature.id]);\n              }}\n            />\n          ))}\n        </g>\n      </svg>\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}